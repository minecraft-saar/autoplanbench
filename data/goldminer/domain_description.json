{
    "action_mappings": {
        "move": "move from loc {} to loc {}",
        "pickup-laser": "pick up laser at loc {}",
        "pickup-bomb": "pick up bomb at loc {}",
        "putdown-laser": "put down laser at loc {}",
        "detonate-bomb": "detonate bomb at loc {} connected to loc {}",
        "fire-laser": "fire laser from loc {} to loc {}",
        "pick-gold": "pick up gold at loc {}"
    },
    "action_mappings_indef": {
        "move": "move from a loc {} to a loc {}",
        "pickup-laser": "pick up laser at a loc {}",
        "pickup-bomb": "pick up bomb at a loc {}",
        "putdown-laser": "put down laser at a loc {}",
        "detonate-bomb": "detonate bomb at a loc {} connected to a loc {}",
        "fire-laser": "fire laser from a loc {} to a loc {}",
        "pick-gold": "pick up gold at a loc {}"
    },
    "predicate_mappings": {
        "robot-at": "the robot is at {}",
        "bomb-at": "The bomb is at {}",
        "laser-at": "the laser is at {}",
        "soft-rock-at": "{} is at the soft rock",
        "hard-rock-at": "There is hard rock at {}",
        "gold-at": "there is gold at {}",
        "arm-empty": "the arm is empty",
        "holds-bomb": "the bomb is being held",
        "holds-laser": "the laser is being held",
        "holds-gold": "is holding gold",
        "clear": "{} is clear",
        "connected": "{} is connected to {}"
    },
    "actions": {
        "move": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc",
                "?y": "loc"
            },
            "pddl": "(move ?x ?y)",
            "description": "move from a loc A to a loc B",
            "preconditions": [
                "I can only move from a loc A to a loc B if it is the case that A is connected to B and the robot is at A and B is clear"
            ],
            "effects": [
                "Once I move from a loc A to a loc B, it is the case that the robot is at B",
                "Once I move from a loc A to a loc B, it is not the case anymore that the robot is at A"
            ]
        },
        "pickup-laser": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(pickup-laser ?x)",
            "description": "pick up laser at a loc A",
            "preconditions": [
                "I can only pick up laser at a loc A if it is the case that the laser is at A and the robot is at A and the arm is empty"
            ],
            "effects": [
                "Once I pick up laser at a loc A, it is the case that the laser is being held",
                "Once I pick up laser at a loc A, it is not the case anymore that the laser is at A and it is not the case anymore that the arm is empty"
            ]
        },
        "pickup-bomb": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(pickup-bomb ?x)",
            "description": "pick up bomb at a loc A",
            "preconditions": [
                "I can only pick up bomb at a loc A if it is the case that the arm is empty and the robot is at A and The bomb is at A"
            ],
            "effects": [
                "Once I pick up bomb at a loc A, it is the case that the bomb is being held",
                "Once I pick up bomb at a loc A, it is not the case anymore that the arm is empty"
            ]
        },
        "putdown-laser": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(putdown-laser ?x)",
            "description": "put down laser at a loc A",
            "preconditions": [
                "I can only put down laser at a loc A if it is the case that the robot is at A and the laser is being held"
            ],
            "effects": [
                "Once I put down laser at a loc A, it is the case that the laser is at A and the arm is empty",
                "Once I put down laser at a loc A, it is not the case anymore that the laser is being held"
            ]
        },
        "detonate-bomb": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc",
                "?y": "loc"
            },
            "pddl": "(detonate-bomb ?x ?y)",
            "description": "detonate bomb at a loc A connected to a loc B",
            "preconditions": [
                "I can only detonate bomb at a loc A connected to a loc B if it is the case that A is connected to B and the bomb is being held and the robot is at A and B is at the soft rock"
            ],
            "effects": [
                "Once I detonate bomb at a loc A connected to a loc B, it is the case that the arm is empty and B is clear",
                "Once I detonate bomb at a loc A connected to a loc B, it is not the case anymore that the bomb is being held and it is not the case anymore that B is at the soft rock"
            ]
        },
        "fire-laser": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc",
                "?y": "loc"
            },
            "pddl": "(fire-laser ?x ?y)",
            "description": "fire laser from a loc A to a loc B",
            "preconditions": [
                "I can only fire laser from a loc A to a loc B if it is the case that A is connected to B and the robot is at A and the laser is being held"
            ],
            "effects": [
                "Once I fire laser from a loc A to a loc B, it is the case that B is clear",
                "Once I fire laser from a loc A to a loc B, it is not the case anymore that there is gold at B and it is not the case anymore that There is hard rock at B and it is not the case anymore that B is at the soft rock"
            ]
        },
        "pick-gold": {
            "annotation": "",
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(pick-gold ?x)",
            "description": "pick up gold at a loc A",
            "preconditions": [
                "I can only pick up gold at a loc A if it is the case that there is gold at A and the robot is at A and the arm is empty"
            ],
            "effects": [
                "Once I pick up gold at a loc A, it is the case that is holding gold",
                "Once I pick up gold at a loc A, it is not the case anymore that the arm is empty"
            ]
        }
    },
    "predicates": {
        "robot-at": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(robot-at ?x)"
        },
        "bomb-at": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(bomb-at ?x)"
        },
        "laser-at": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(laser-at ?x)"
        },
        "soft-rock-at": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(soft-rock-at ?x)"
        },
        "hard-rock-at": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(hard-rock-at ?x)"
        },
        "gold-at": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(gold-at ?x)"
        },
        "arm-empty": {
            "parameter_types": {},
            "pddl": "(arm-empty)"
        },
        "holds-bomb": {
            "parameter_types": {},
            "pddl": "(holds-bomb)"
        },
        "holds-laser": {
            "parameter_types": {},
            "pddl": "(holds-laser)"
        },
        "holds-gold": {
            "parameter_types": {},
            "pddl": "(holds-gold)"
        },
        "clear": {
            "parameter_types": {
                "?x": "loc"
            },
            "pddl": "(clear ?x)"
        },
        "connected": {
            "parameter_types": {
                "?x": "loc",
                "?y": "loc"
            },
            "pddl": "(connected ?x ?y)"
        }
    },
    "action_nl_templates": {
        "move": "move from loc {?x} to loc {?y}",
        "pickup-laser": "pick up laser at loc {?x}",
        "pickup-bomb": "pick up bomb at loc {?x}",
        "putdown-laser": "put down laser at loc {?x}",
        "detonate-bomb": "detonate bomb at loc {?x} connected to loc {?y}",
        "fire-laser": "fire laser from loc {?x} to loc {?y}",
        "pick-gold": "pick up gold at loc {?x}"
    },
    "predicate_nl_templates": {
        "robot-at": "the robot is at {?x}",
        "bomb-at": "The bomb is at {?x}",
        "laser-at": "the laser is at {?x}",
        "soft-rock-at": "{?x} is at the soft rock",
        "hard-rock-at": "There is hard rock at {?x}",
        "gold-at": "there is gold at {?x}",
        "arm-empty": "the arm is empty",
        "holds-bomb": "the bomb is being held",
        "holds-laser": "the laser is being held",
        "holds-gold": "is holding gold",
        "clear": "{?x} is clear",
        "connected": "{?x} is connected to {?y}"
    },
    "action_nl_templates_indef": {
        "move": "move from a loc {?x} to a loc {?y}",
        "pickup-laser": "pick up laser at a loc {?x}",
        "pickup-bomb": "pick up bomb at a loc {?x}",
        "putdown-laser": "put down laser at a loc {?x}",
        "detonate-bomb": "detonate bomb at a loc {?x} connected to a loc {?y}",
        "fire-laser": "fire laser from a loc {?x} to a loc {?y}",
        "pick-gold": "pick up gold at a loc {?x}"
    },
    "type_hierarchy": [
        "Everything that is a loc is also a object"
    ]
}