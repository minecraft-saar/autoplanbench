{
    "action_mappings": {
        "rewind-movie": "rewind the movie",
        "reset-counter": "reset the counter",
        "start-movie": "start the movie",
        "undo-rewind": "undo rewind of the movie",
        "get-chips": "get chips {}",
        "get-dip": "get dip for object {}",
        "get-pop": "get population of object {}",
        "get-cheese": "get object {} cheese",
        "get-crackers": "get object {} which are crackers"
    },
    "action_mappings_indef": {
        "rewind-movie": "rewind the movie",
        "reset-counter": "reset the counter",
        "start-movie": "start the movie",
        "undo-rewind": "undo rewind of the movie",
        "get-chips": "get a chips {}",
        "get-dip": "get dip for an object {}",
        "get-pop": "get population of an object {}",
        "get-cheese": "get an object {} cheese",
        "get-crackers": "get an object {} which are crackers"
    },
    "predicate_mappings": {
        "movie-rewound": "the movie is rewound",
        "counter-at-other-than-zero": "the counter is not at zero",
        "counter-at-zero": "the counter is at zero",
        "have-chips": "there are chips available",
        "have-dip": "the dip is available",
        "have-pop": "the population is present",
        "have-cheese": "there is cheese available",
        "have-crackers": "there are crackers available",
        "chips": "{} is chips",
        "dip": "{} is being dipped",
        "pop": "{} is being popped",
        "cheese": "{} is cheese",
        "crackers": "{} is crackers"
    },
    "actions": {
        "rewind-movie": {
            "annotation": "",
            "parameter_types": {},
            "pddl": "(rewind-movie)",
            "description": "rewind the movie",
            "preconditions": [
                "I can only rewind the movie if it is the case that the counter is not at zero"
            ],
            "effects": [
                "Once I rewind the movie, it is the case that the movie is rewound"
            ]
        },
        "reset-counter": {
            "annotation": "",
            "parameter_types": {},
            "pddl": "(reset-counter)",
            "description": "reset the counter",
            "preconditions": [
                "I can only reset the counter if it is the case that the counter is not at zero"
            ],
            "effects": [
                "Once I reset the counter, it is the case that the counter is at zero",
                "Once I reset the counter, it is not the case anymore that the counter is not at zero"
            ]
        },
        "start-movie": {
            "annotation": "",
            "parameter_types": {},
            "pddl": "(start-movie)",
            "description": "start the movie",
            "preconditions": [
                "I can only start the movie if it is the case that the counter is at zero"
            ],
            "effects": [
                "Once I start the movie, it is the case that the counter is not at zero",
                "Once I start the movie, it is not the case anymore that the counter is at zero"
            ]
        },
        "undo-rewind": {
            "annotation": "",
            "parameter_types": {},
            "pddl": "(undo-rewind)",
            "description": "undo rewind of the movie",
            "preconditions": [
                "I can only undo rewind of the movie if it is the case that the movie is rewound"
            ],
            "effects": [
                "Once I undo rewind of the movie, it is not the case anymore that the movie is rewound"
            ]
        },
        "get-chips": {
            "annotation": "",
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(get-chips ?x)",
            "description": "get a chips A",
            "preconditions": [
                "I can only get a chips A if it is the case that A is chips and the counter is at zero",
                "I can only get a chips A if it is not the case that the movie is rewound"
            ],
            "effects": [
                "Once I get a chips A, it is the case that there are chips available"
            ]
        },
        "get-dip": {
            "annotation": "",
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(get-dip ?x)",
            "description": "get dip for an object A",
            "preconditions": [
                "I can only get dip for an object A if it is the case that A is being dipped and the counter is at zero",
                "I can only get dip for an object A if it is not the case that the movie is rewound"
            ],
            "effects": [
                "Once I get dip for an object A, it is the case that the dip is available"
            ]
        },
        "get-pop": {
            "annotation": "",
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(get-pop ?x)",
            "description": "get population of an object A",
            "preconditions": [
                "I can only get population of an object A if it is the case that the counter is at zero and A is being popped",
                "I can only get population of an object A if it is not the case that the movie is rewound"
            ],
            "effects": [
                "Once I get population of an object A, it is the case that the population is present"
            ]
        },
        "get-cheese": {
            "annotation": "",
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(get-cheese ?x)",
            "description": "get an object A cheese",
            "preconditions": [
                "I can only get an object A cheese if it is the case that A is cheese and the counter is at zero",
                "I can only get an object A cheese if it is not the case that the movie is rewound"
            ],
            "effects": [
                "Once I get an object A cheese, it is the case that there is cheese available"
            ]
        },
        "get-crackers": {
            "annotation": "",
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(get-crackers ?x)",
            "description": "get an object A which are crackers",
            "preconditions": [
                "I can only get an object A which are crackers if it is the case that A is crackers and the counter is at zero",
                "I can only get an object A which are crackers if it is not the case that the movie is rewound"
            ],
            "effects": [
                "Once I get an object A which are crackers, it is the case that there are crackers available"
            ]
        }
    },
    "predicates": {
        "movie-rewound": {
            "parameter_types": {},
            "pddl": "(movie-rewound)"
        },
        "counter-at-other-than-zero": {
            "parameter_types": {},
            "pddl": "(counter-at-other-than-zero)"
        },
        "counter-at-zero": {
            "parameter_types": {},
            "pddl": "(counter-at-zero)"
        },
        "have-chips": {
            "parameter_types": {},
            "pddl": "(have-chips)"
        },
        "have-dip": {
            "parameter_types": {},
            "pddl": "(have-dip)"
        },
        "have-pop": {
            "parameter_types": {},
            "pddl": "(have-pop)"
        },
        "have-cheese": {
            "parameter_types": {},
            "pddl": "(have-cheese)"
        },
        "have-crackers": {
            "parameter_types": {},
            "pddl": "(have-crackers)"
        },
        "chips": {
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(chips ?x)"
        },
        "dip": {
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(dip ?x)"
        },
        "pop": {
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(pop ?x)"
        },
        "cheese": {
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(cheese ?x)"
        },
        "crackers": {
            "parameter_types": {
                "?x": "object"
            },
            "pddl": "(crackers ?x)"
        }
    },
    "action_nl_templates": {
        "rewind-movie": "rewind the movie",
        "reset-counter": "reset the counter",
        "start-movie": "start the movie",
        "undo-rewind": "undo rewind of the movie",
        "get-chips": "get chips {?x}",
        "get-dip": "get dip for object {?x}",
        "get-pop": "get population of object {?x}",
        "get-cheese": "get object {?x} cheese",
        "get-crackers": "get object {?x} which are crackers"
    },
    "predicate_nl_templates": {
        "movie-rewound": "the movie is rewound",
        "counter-at-other-than-zero": "the counter is not at zero",
        "counter-at-zero": "the counter is at zero",
        "have-chips": "there are chips available",
        "have-dip": "the dip is available",
        "have-pop": "the population is present",
        "have-cheese": "there is cheese available",
        "have-crackers": "there are crackers available",
        "chips": "{?x} is chips",
        "dip": "{?x} is being dipped",
        "pop": "{?x} is being popped",
        "cheese": "{?x} is cheese",
        "crackers": "{?x} is crackers"
    },
    "action_nl_templates_indef": {
        "rewind-movie": "rewind the movie",
        "reset-counter": "reset the counter",
        "start-movie": "start the movie",
        "undo-rewind": "undo rewind of the movie",
        "get-chips": "get a chips {?x}",
        "get-dip": "get dip for an object {?x}",
        "get-pop": "get population of an object {?x}",
        "get-cheese": "get an object {?x} cheese",
        "get-crackers": "get an object {?x} which are crackers"
    },
    "type_hierarchy": []
}