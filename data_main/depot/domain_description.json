{
    "action_mappings": {
        "drive": "drive truck {} from place {} to place {}",
        "lift": "lift crate {} from surface {} at place {} using hoist {}",
        "drop": "drop crate {} from hoist {} onto surface {} at place {}",
        "load": "load crate {} into truck {} at place {} with hoist {}",
        "unload": "unload crate {} from truck {} at place {} using hoist {}"
    },
    "action_mappings_indef": {
        "drive": "drive a truck {} from a place {} to a place {}",
        "lift": "lift a crate {} from a surface {} at a place {} using a hoist {}",
        "drop": "drop a crate {} from a hoist {} onto a surface {} at a place {}",
        "load": "load a crate {} into a truck {} at a place {} with a hoist {}",
        "unload": "unload a crate {} from a truck {} at a place {} using a hoist {}"
    },
    "predicate_mappings": {
        "at": "{} is at {}",
        "on": "{} is on {}",
        "in": "{} is in {}",
        "lifting": "{} is lifting {}",
        "available": "{} is available",
        "clear": "{} is clear"
    },
    "actions": {
        "drive": {
            "annotation": "",
            "parameter_types": {
                "?x": "truck",
                "?y": "place",
                "?z": "place"
            },
            "pddl": "(drive ?x ?y ?z)",
            "description": "drive a truck A from a place B to a place C",
            "preconditions": [
                "I can only drive a truck A from a place B to a place C if it is the case that A is at B"
            ],
            "effects": [
                "Once I drive a truck A from a place B to a place C, it is the case that A is at C",
                "Once I drive a truck A from a place B to a place C, it is not the case anymore that A is at B"
            ]
        },
        "lift": {
            "annotation": "",
            "parameter_types": {
                "?x": "hoist",
                "?y": "crate",
                "?z": "surface",
                "?p": "place"
            },
            "pddl": "(lift ?x ?y ?z ?p)",
            "description": "lift a crate B from a surface C at a place D using a hoist A",
            "preconditions": [
                "I can only lift a crate B from a surface C at a place D using a hoist A if it is the case that B is at D and B is on C and B is clear and A is at D and A is available"
            ],
            "effects": [
                "Once I lift a crate B from a surface C at a place D using a hoist A, it is the case that A is lifting B and C is clear",
                "Once I lift a crate B from a surface C at a place D using a hoist A, it is not the case anymore that B is at D and it is not the case anymore that A is available and it is not the case anymore that B is clear and it is not the case anymore that B is on C"
            ]
        },
        "drop": {
            "annotation": "",
            "parameter_types": {
                "?x": "hoist",
                "?y": "crate",
                "?z": "surface",
                "?p": "place"
            },
            "pddl": "(drop ?x ?y ?z ?p)",
            "description": "drop a crate B from a hoist A onto a surface C at a place D",
            "preconditions": [
                "I can only drop a crate B from a hoist A onto a surface C at a place D if it is the case that A is lifting B and C is clear and C is at D and A is at D"
            ],
            "effects": [
                "Once I drop a crate B from a hoist A onto a surface C at a place D, it is the case that B is clear and B is at D and A is available and B is on C",
                "Once I drop a crate B from a hoist A onto a surface C at a place D, it is not the case anymore that A is lifting B and it is not the case anymore that C is clear"
            ]
        },
        "load": {
            "annotation": "",
            "parameter_types": {
                "?x": "hoist",
                "?y": "crate",
                "?z": "truck",
                "?p": "place"
            },
            "pddl": "(load ?x ?y ?z ?p)",
            "description": "load a crate B into a truck C at a place D with a hoist A",
            "preconditions": [
                "I can only load a crate B into a truck C at a place D with a hoist A if it is the case that A is lifting B and C is at D and A is at D"
            ],
            "effects": [
                "Once I load a crate B into a truck C at a place D with a hoist A, it is the case that A is available and B is in C",
                "Once I load a crate B into a truck C at a place D with a hoist A, it is not the case anymore that A is lifting B"
            ]
        },
        "unload": {
            "annotation": "",
            "parameter_types": {
                "?x": "hoist",
                "?y": "crate",
                "?z": "truck",
                "?p": "place"
            },
            "pddl": "(unload ?x ?y ?z ?p)",
            "description": "unload a crate B from a truck C at a place D using a hoist A",
            "preconditions": [
                "I can only unload a crate B from a truck C at a place D using a hoist A if it is the case that B is in C and A is available and C is at D and A is at D"
            ],
            "effects": [
                "Once I unload a crate B from a truck C at a place D using a hoist A, it is the case that A is lifting B",
                "Once I unload a crate B from a truck C at a place D using a hoist A, it is not the case anymore that A is available and it is not the case anymore that B is in C"
            ]
        }
    },
    "predicates": {
        "at": {
            "parameter_types": {
                "?x": "locatable",
                "?y": "place"
            },
            "pddl": "(at ?x ?y)"
        },
        "on": {
            "parameter_types": {
                "?x": "crate",
                "?y": "surface"
            },
            "pddl": "(on ?x ?y)"
        },
        "in": {
            "parameter_types": {
                "?x": "crate",
                "?y": "truck"
            },
            "pddl": "(in ?x ?y)"
        },
        "lifting": {
            "parameter_types": {
                "?x": "hoist",
                "?y": "crate"
            },
            "pddl": "(lifting ?x ?y)"
        },
        "available": {
            "parameter_types": {
                "?x": "hoist"
            },
            "pddl": "(available ?x)"
        },
        "clear": {
            "parameter_types": {
                "?x": "surface"
            },
            "pddl": "(clear ?x)"
        }
    },
    "action_nl_templates": {
        "drive": "drive truck {?x} from place {?y} to place {?z}",
        "lift": "lift crate {?y} from surface {?z} at place {?p} using hoist {?x}",
        "drop": "drop crate {?y} from hoist {?x} onto surface {?z} at place {?p}",
        "load": "load crate {?y} into truck {?z} at place {?p} with hoist {?x}",
        "unload": "unload crate {?y} from truck {?z} at place {?p} using hoist {?x}"
    },
    "predicate_nl_templates": {
        "at": "{?x} is at {?y}",
        "on": "{?x} is on {?y}",
        "in": "{?x} is in {?y}",
        "lifting": "{?x} is lifting {?y}",
        "available": "{?x} is available",
        "clear": "{?x} is clear"
    },
    "action_nl_templates_indef": {
        "drive": "drive a truck {?x} from a place {?y} to a place {?z}",
        "lift": "lift a crate {?y} from a surface {?z} at a place {?p} using a hoist {?x}",
        "drop": "drop a crate {?y} from a hoist {?x} onto a surface {?z} at a place {?p}",
        "load": "load a crate {?y} into a truck {?z} at a place {?p} with a hoist {?x}",
        "unload": "unload a crate {?y} from a truck {?z} at a place {?p} using a hoist {?x}"
    },
    "type_hierarchy": [
        "Everything that is a place or a locatable is also a object",
        "Everything that is a depot or a distributor is also a place",
        "Everything that is a truck or a hoist or a surface is also a locatable",
        "Everything that is a pallet or a crate is also a surface"
    ]
}