{
    "action_mappings": {
        "change-color": "change the color of robot {} from color {} to color {}",
        "paint-up": "paint tile {} above tile {} with color {} using robot {}",
        "paint-down": "paint tile {} down from tile {} with color {} using robot {}",
        "up": "move robot {} up from tile {} to tile {}",
        "down": "move robot {} down from tile {} to tile {}",
        "right": "move robot {} from tile {} to the right tile tile {}",
        "left": "move robot {} from tile {} to the left tile tile {}"
    },
    "action_mappings_indef": {
        "change-color": "change the color of a robot {} from a color {} to a color {}",
        "paint-up": "paint a tile {} above a tile {} with a color {} using a robot {}",
        "paint-down": "paint a tile {} down from a tile {} with a color {} using a robot {}",
        "up": "move a robot {} up from a tile {} to a tile {}",
        "down": "move a robot {} down from a tile {} to a tile {}",
        "right": "move a robot {} from a tile {} to the right tile a tile {}",
        "left": "move a robot {} from a tile {} to the left tile a tile {}"
    },
    "predicate_mappings": {
        "robot-at": "The robot {} is at location {}",
        "up": "{} is up {}",
        "down": "{} is down {}",
        "right": "{} is to the right of {}",
        "left": "{} is to the left of {}",
        "clear": "{} is clear",
        "painted": "{} is painted in {}",
        "robot-has": "The robot {} has {}",
        "available-color": "{} is an available color",
        "free-color": "{} is a free color"
    },
    "actions": {
        "change-color": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?c": "color",
                "?c2": "color"
            },
            "pddl": "(change-color ?r ?c ?c2)",
            "description": "change the color of a robot A from a color B to a color C",
            "preconditions": [
                "I can only change the color of a robot A from a color B to a color C if it is the case that The robot A has B and C is an available color"
            ],
            "effects": [
                "Once I change the color of a robot A from a color B to a color C, it is the case that The robot A has C",
                "Once I change the color of a robot A from a color B to a color C, it is not the case anymore that The robot A has B"
            ]
        },
        "paint-up": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?y": "tile",
                "?x": "tile",
                "?c": "color"
            },
            "pddl": "(paint-up ?r ?y ?x ?c)",
            "description": "paint a tile B above a tile C with a color D using a robot A",
            "preconditions": [
                "I can only paint a tile B above a tile C with a color D using a robot A if it is the case that B is clear and The robot A has D and The robot A is at location C and B is up C"
            ],
            "effects": [
                "Once I paint a tile B above a tile C with a color D using a robot A, it is the case that B is painted in D",
                "Once I paint a tile B above a tile C with a color D using a robot A, it is not the case anymore that B is clear"
            ]
        },
        "paint-down": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?y": "tile",
                "?x": "tile",
                "?c": "color"
            },
            "pddl": "(paint-down ?r ?y ?x ?c)",
            "description": "paint a tile B down from a tile C with a color D using a robot A",
            "preconditions": [
                "I can only paint a tile B down from a tile C with a color D using a robot A if it is the case that B is clear and The robot A has D and The robot A is at location C and B is down C"
            ],
            "effects": [
                "Once I paint a tile B down from a tile C with a color D using a robot A, it is the case that B is painted in D",
                "Once I paint a tile B down from a tile C with a color D using a robot A, it is not the case anymore that B is clear"
            ]
        },
        "up": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(up ?r ?x ?y)",
            "description": "move a robot A up from a tile B to a tile C",
            "preconditions": [
                "I can only move a robot A up from a tile B to a tile C if it is the case that C is up B and The robot A is at location B and C is clear"
            ],
            "effects": [
                "Once I move a robot A up from a tile B to a tile C, it is the case that B is clear and The robot A is at location C",
                "Once I move a robot A up from a tile B to a tile C, it is not the case anymore that The robot A is at location B and it is not the case anymore that C is clear"
            ]
        },
        "down": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(down ?r ?x ?y)",
            "description": "move a robot A down from a tile B to a tile C",
            "preconditions": [
                "I can only move a robot A down from a tile B to a tile C if it is the case that C is clear and The robot A is at location B and C is down B"
            ],
            "effects": [
                "Once I move a robot A down from a tile B to a tile C, it is the case that B is clear and The robot A is at location C",
                "Once I move a robot A down from a tile B to a tile C, it is not the case anymore that The robot A is at location B and it is not the case anymore that C is clear"
            ]
        },
        "right": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(right ?r ?x ?y)",
            "description": "move a robot A from a tile B to the right tile a tile C",
            "preconditions": [
                "I can only move a robot A from a tile B to the right tile a tile C if it is the case that The robot A is at location B and C is to the right of B and C is clear"
            ],
            "effects": [
                "Once I move a robot A from a tile B to the right tile a tile C, it is the case that B is clear and The robot A is at location C",
                "Once I move a robot A from a tile B to the right tile a tile C, it is not the case anymore that The robot A is at location B and it is not the case anymore that C is clear"
            ]
        },
        "left": {
            "annotation": "",
            "parameter_types": {
                "?r": "robot",
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(left ?r ?x ?y)",
            "description": "move a robot A from a tile B to the left tile a tile C",
            "preconditions": [
                "I can only move a robot A from a tile B to the left tile a tile C if it is the case that C is to the left of B and The robot A is at location B and C is clear"
            ],
            "effects": [
                "Once I move a robot A from a tile B to the left tile a tile C, it is the case that B is clear and The robot A is at location C",
                "Once I move a robot A from a tile B to the left tile a tile C, it is not the case anymore that The robot A is at location B and it is not the case anymore that C is clear"
            ]
        }
    },
    "predicates": {
        "robot-at": {
            "parameter_types": {
                "?r": "robot",
                "?x": "tile"
            },
            "pddl": "(robot-at ?r ?x)"
        },
        "up": {
            "parameter_types": {
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(up ?x ?y)"
        },
        "down": {
            "parameter_types": {
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(down ?x ?y)"
        },
        "right": {
            "parameter_types": {
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(right ?x ?y)"
        },
        "left": {
            "parameter_types": {
                "?x": "tile",
                "?y": "tile"
            },
            "pddl": "(left ?x ?y)"
        },
        "clear": {
            "parameter_types": {
                "?x": "tile"
            },
            "pddl": "(clear ?x)"
        },
        "painted": {
            "parameter_types": {
                "?x": "tile",
                "?c": "color"
            },
            "pddl": "(painted ?x ?c)"
        },
        "robot-has": {
            "parameter_types": {
                "?r": "robot",
                "?c": "color"
            },
            "pddl": "(robot-has ?r ?c)"
        },
        "available-color": {
            "parameter_types": {
                "?c": "color"
            },
            "pddl": "(available-color ?c)"
        },
        "free-color": {
            "parameter_types": {
                "?r": "robot"
            },
            "pddl": "(free-color ?r)"
        }
    },
    "action_nl_templates": {
        "change-color": "change the color of robot {?r} from color {?c} to color {?c2}",
        "paint-up": "paint tile {?y} above tile {?x} with color {?c} using robot {?r}",
        "paint-down": "paint tile {?y} down from tile {?x} with color {?c} using robot {?r}",
        "up": "move robot {?r} up from tile {?x} to tile {?y}",
        "down": "move robot {?r} down from tile {?x} to tile {?y}",
        "right": "move robot {?r} from tile {?x} to the right tile tile {?y}",
        "left": "move robot {?r} from tile {?x} to the left tile tile {?y}"
    },
    "predicate_nl_templates": {
        "robot-at": "The robot {?r} is at location {?x}",
        "up": "{?x} is up {?y}",
        "down": "{?x} is down {?y}",
        "right": "{?x} is to the right of {?y}",
        "left": "{?x} is to the left of {?y}",
        "clear": "{?x} is clear",
        "painted": "{?x} is painted in {?c}",
        "robot-has": "The robot {?r} has {?c}",
        "available-color": "{?c} is an available color",
        "free-color": "{?r} is a free color"
    },
    "action_nl_templates_indef": {
        "change-color": "change the color of a robot {?r} from a color {?c} to a color {?c2}",
        "paint-up": "paint a tile {?y} above a tile {?x} with a color {?c} using a robot {?r}",
        "paint-down": "paint a tile {?y} down from a tile {?x} with a color {?c} using a robot {?r}",
        "up": "move a robot {?r} up from a tile {?x} to a tile {?y}",
        "down": "move a robot {?r} down from a tile {?x} to a tile {?y}",
        "right": "move a robot {?r} from a tile {?x} to the right tile a tile {?y}",
        "left": "move a robot {?r} from a tile {?x} to the left tile a tile {?y}"
    },
    "type_hierarchy": [
        "Everything that is a robot or a tile or a color is also a object"
    ]
}